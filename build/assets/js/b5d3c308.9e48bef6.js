"use strict";(self.webpackChunklearn_programming=self.webpackChunklearn_programming||[]).push([[9176],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(y,l(l({ref:t},c),{},{components:n})):a.createElement(y,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1134:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:4,title:"Chapter 2b - Typecasting"},s=void 0,p={unversionedId:"lesson-notes/lesson-2b",id:"lesson-notes/lesson-2b",title:"Chapter 2b - Typecasting",description:"Typecasting",source:"@site/java/lesson-notes/lesson-2b.md",sourceDirName:"lesson-notes",slug:"/lesson-notes/lesson-2b",permalink:"/java/lesson-notes/lesson-2b",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Chapter 2b - Typecasting"},sidebar:"tutorialSidebar",previous:{title:"Chapter 2a - Data Types in Java",permalink:"/java/lesson-notes/lesson-2a"},next:{title:"Chapter 3a",permalink:"/java/lesson-notes/lesson-3a"}},c={},u=[{value:"Typecasting",id:"typecasting",level:2},{value:"Example Implicit Typecasting",id:"example-implicit-typecasting",level:3},{value:"Example Explicit Typecasting",id:"example-explicit-typecasting",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"typecasting"},"Typecasting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"float myFloat = 1.5f;\nint myInt = (int) myDouble; // changes double to int \n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Typecasting might lead to loss of precision")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In Implicit conversions, one data type is automatically converted into another if found compatible, but it should be in the right order else it may lead to loss of precision."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"char->short-> int->float->double->long\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udcda Explicit & Implicit?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Explicit"),": stated clearly and in detail, leaving no room for confusion or doubt."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Implicit"),": implied though not plainly expressed."))),(0,i.kt)("h3",{id:"example-implicit-typecasting"},"Example Implicit Typecasting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n public static void main(String args[]) {\n int x = 10; // integer x\n char y = \'a\'; // character c\n // x is implicitly converted to float\n float z =x + 1.0f;\n System.out.println("x = " + x );\n System.out.println("y = " + y );\n System.out.println("z = " + z );\n }\n}\n')),(0,i.kt)("p",null,"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x = 10\ny = a\nz = 11.0\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83e\uddea Try the code out!"),(0,i.kt)("iframe",{src:"https://trinket.io/embed/java/67bc304013",width:"100%",height:"600",frameborder:"0",marginwidth:"0",marginheight:"0",allowfullscreen:!0})),(0,i.kt)("h3",{id:"example-explicit-typecasting"},"Example Explicit Typecasting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n\npublic static void main(String args[]) {\n  double d=1.6;\n  int val=(int)d; //casting from double to int\n  System.out.println("val = "+val );\n  }\n}\n')),(0,i.kt)("p",null,"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"val = 1\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83e\uddea Try the code out!"),(0,i.kt)("iframe",{src:"https://trinket.io/embed/java/22d570ec86",width:"100%",height:"300",frameborder:"0",marginwidth:"0",marginheight:"0",allowfullscreen:!0}),(0,i.kt)("p",null,"\ud83d\ude4b\u200d\u2642\ufe0f Analysis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Why do you think that the code prints ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"1.6"),"?"))))}d.isMDXComponent=!0}}]);